    PostgreSQL
1. Требуется составить расписание случайных проверок.
   Создайте оператор выбора, который выдаст 100 дат, начиная с текущей, при этом каждая дата
   отличается от предыдущей на 2-7 дней.

________________________________________________________________________________________________________________________

   SELECT
   generate_series(
   CURRENT_DATE,
   CURRENT_DATE + INTERVAL '99 days',
   (random() * 5 + 2) * INTERVAL '1 day'
   )::DATE AS date_value;

________________________________________________________________________________________________________________________


2. Требуется оценить эффективность продавцов.
   Создайте запрос, который вернёт количество и сумму продаж для каждого продавца,
   а также ранжирует продавцов по количеству продаж и по сумме продаж.

   Результат запроса должен содержать столбцы id, name из таблицы employee, а также столбцы:
    sales_c - количество продаж,
    sales_rank_c - ранг по количеству продаж,
    sales_s - сумма продаж,
    sales_rank_s -  ранг по сумме продаж.

________________________________________________________________________________________________________________________

    WITH sales_summary AS (
        SELECT
            e.id AS employee_id,
            e.name AS name,
            COUNT(s.id) AS sales_c,
            SUM(s.price) AS sales_s
        FROM
            employee e
        LEFT JOIN
            sales s ON e.id = s.employee_id
        GROUP BY
            e.id, e.name
    )
    SELECT
        ss.employee_id AS id,
        ss.name,
        ss.sales_c,
        RANK() OVER (ORDER BY ss.sales_c DESC) AS sales_rank_c,
        ss.sales_s,
        RANK() OVER (ORDER BY ss.sales_s DESC) AS sales_rank_s
    FROM
        sales_summary ss;

________________________________________________________________________________________________________________________

3. Имеется таблица денежных переводов transfers

    from – номер аккаунта, с которого сделан перевод,
    to – номер аккаунта, на который сделан перевод,
    amount – сумма перевода,
    tdate – дата перевода.
    Требуется создать оператор выбора, который для каждого аккаунта выведет периоды постоянства остатков.
    Результат запроса должен содержать столбцы acc – номер аккаунта, dt_from - начало периода,
    dt_to - конец периода, balance – остаток на счёте в данном периоде.
    Дата конца последнего периода – 01.01.3000.

    from -> number
    to -> number_to

________________________________________________________________________________________________________________________
    SELECT
        "number" AS acc,
        tdate AS dt_from,
        COALESCE(
            LEAD(tdate) OVER (PARTITION BY "number" ORDER BY tdate),
            '3000-01-01'::date
        ) AS dt_to,
        balance
    FROM (
        SELECT
            "number",
            tdate,
            amount,
            SUM(amount) OVER (PARTITION BY "number" ORDER BY tdate) AS balance,
            LAG(balance) OVER (PARTITION BY "number" ORDER BY tdate) AS prev_balance
        FROM transfers
    ) AS BalanceChanges
    WHERE prev_balance IS NULL OR prev_balance <> balance
    ORDER BY "number", dt_from;
________________________________________________________________________________________________________________________
